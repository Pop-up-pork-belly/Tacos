generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cart_items {
  cart_item_id Int       @id @default(autoincrement())
  cartId       Int?
  productId    Int?
  quantity     Int
  added_at     DateTime? @default(now()) @db.Timestamp(6)
  carts        carts?    @relation(fields: [cartId], references: [cart_id], onDelete: NoAction, onUpdate: NoAction)
  products     products? @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model carts {
  cart_id    Int          @id @default(autoincrement())
  userId     Int?
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  cart_items cart_items[]
  users      users?       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model credit_card {
  cardnumber String? @db.VarChar(16)
  expmonth   Int?
  expyear    Int?

  @@ignore
}

model order_history {
  orderid    Int     @id @default(autoincrement())
  first_name String? @db.VarChar(225)
  last_name  String? @db.VarChar(225)
  address    String? @db.VarChar(225)
}

model orders {
  id            Int             @id @default(autoincrement())
  userId        Int?
  productsId    Int?
  quantity      Int
  total_price   Int
  order_date    DateTime?       @default(dbgenerated("CURRENT_DATE")) @db.Date
  products      products?       @relation(fields: [productsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shipping_info shipping_info[]
}

model product_categories {
  id            Int        @id @default(autoincrement())
  category_name String     @db.VarChar(255)
  products      products[]
}

model products {
  id                 Int                 @id @default(autoincrement())
  product_name       String              @db.VarChar(225)
  price              Int
  categoryId         Int?
  image              Bytes?
  quantity           Int
  cart_items         cart_items[]
  orders             orders[]
  product_categories product_categories? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reviews            reviews[]
}

model reviews {
  id          Int       @id @default(autoincrement())
  product_id  Int?
  user_id     Int?
  rating      Int?
  comment     String?
  review_date DateTime? @default(now()) @db.Timestamp(6)
  products    products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model shipping_info {
  id               Int     @id @default(autoincrement())
  orderId          Int?
  shipping_address String? @db.VarChar(255)
  shipping_city    String? @db.VarChar(255)
  shipping_state   String? @db.VarChar(255)
  shipping_zip     String? @db.VarChar(10)
  shipping_country String? @db.VarChar(255)
  orders           orders? @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id       Int       @id @default(autoincrement())
  username String    @unique @db.VarChar(225)
  password String    @db.VarChar(225)
  email    String    @db.VarChar(255)
  isAdmin  Boolean?
  carts    carts[]
  orders   orders[]
  reviews  reviews[]
}
